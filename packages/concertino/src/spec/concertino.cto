namespace concertino.metamodel@0.1.0-alpha.3

import concerto.metamodel@1.0.0.{Decorator, Import}

// IMPORTANT NOTE
// This model is not a specification for the Concertino metamodel because Concertino
// does not use $class discriminators. Therefore, this model cannot be used to validate Concertino files
// without a feature such as https://github.com/accordproject/concerto/issues/542
// Nevertheless, this model is useful for understanding the structure of Concertino files and for generating code.

/**
 * Represents the Concertino format.
 */
concept Concertino {
  o DeclarationMap declarations
  o Metadata metadata
}

/** Common scalar definitions */
scalar FullyQualifiedName extends String
scalar Identifier extends String regex=/^(\p{Lu}|\p{Ll}|\p{Lt}|\p{Lm}|\p{Lo}|\p{Nl}|\$|_|\\u[0-9A-Fa-f]{4})(?:\p{Lu}|\p{Ll}|\p{Lt}|\p{Lm}|\p{Lo}|\p{Nl}|\$|_|\\u[0-9A-Fa-f]{4}|\p{Mn}|\p{Mc}|\p{Nd}|\p{Pc}|\u200C|\u200D)*$/u
scalar Namespace extends String
scalar SemanticVersion extends String
scalar URI extends String

/**
 * Represents a map of declarations.
 */
map DeclarationMap {
  o FullyQualifiedName
  o Declaration
}

/**
 * Metadata for the Concertino format.
 */
concept Metadata {
  o SemanticVersion concertinoVersion
  o ModelMetadataMap models
}

map ModelMetadataMap {
  o Namespace
  o ModelMetadata
}

/**
 * Represents metadata for a model.
 */
concept ModelMetadata {
  o Namespace namespace
  o SemanticVersion concertoVersion optional
  o URI sourceUri optional
  o Import[] imports optional
  o Decorator[] decorators optional
}

/**
 * Represents a unique identifier for a declaration.
 */
concept ParsedFullyQualifiedName {
  o Namespace namespace
  o Identifier localName
  o SemanticVersion version
}

/**
 * Represents a generic declaration.
 */
abstract concept Declaration {
  o FullyQualifiedName name
  o Vocabulary vocabulary optional
  o MetadataMap metadata optional
}

/**
 * Represents a ConceptDeclaration.
 */
concept ConceptDeclaration extends Declaration {
  o Property[] properties
  o FullyQualifiedName[] extends optional
  o Boolean isAbstract optional
  o Prototype prototype optional // only specified, if the concept uses a prototype
}

/**
 * Indicates a prototype for a ConceptDeclaration.
 */
enum Prototype {
  o AssetDeclaration
  o EventDeclaration
  o TransactionDeclaration
  o ParticipantDeclaration
}

/**
 * Represents an EnumDeclaration.
 */
concept EnumDeclaration extends Declaration {
  o EnumValueMap values
}

map EnumValueMap {
  o String
  o EnumValue
}

/**
 * Represents an enum value in an EnumDeclaration.
 */
concept EnumValue {
  o Vocabulary vocabulary optional
  o MetadataMap metadata optional
}

/**
 * Represents a ScalarDeclaration.
 */
abstract concept ScalarDeclaration extends Declaration {}

concept StringScalarDeclaration extends ScalarDeclaration {
  o String regex optional // For StringScalar
  o Integer[] length optional // For StringScalar
  o String default optional // Default value for StringScalar
}
concept IntegerScalarDeclaration extends ScalarDeclaration {
  o Integer[] range optional // For IntegerScalar
  o Integer default optional // Default value for IntegerScalar
}
concept BooleanScalarDeclaration extends ScalarDeclaration {
  o Boolean default optional // Default value for BooleanScalar
}
concept DoubleScalarDeclaration extends ScalarDeclaration {
  o Double[] range optional // For DoubleScalar
  o Double default optional // Default value for DoubleScalar
}
concept LongScalarDeclaration extends ScalarDeclaration {
  o Long[] range optional // For LongScalar
  o Long default optional // Default value for LongScalar
}
concept DateTimeScalarDeclaration extends ScalarDeclaration {
  o String default optional // Default value for DateTimeScalar
}

/**
 * Represents a MapDeclaration.
 */
concept MapDeclaration extends Declaration {
  o MapKey keyType // e.g., "String", "DateTime"
  o MapValue valueType // e.g., "String", "Boolean", "com.test.models@1.2.3.Xyc"
}

/**
 * Represents a key in a MapDeclaration.
 */
concept MapKey {
  o String type // Fully qualified type name or primitive type
  o Vocabulary vocabulary optional
  o MetadataMap metadata optional
}

/**
 * Represents a value in a MapDeclaration.
 */
concept MapValue {
  o String type // Fully qualified type name or primitive type
  o Vocabulary vocabulary optional
  o MetadataMap metadata optional
  o Boolean isRelationship optional // For relationship map values

}

/**
 * Represents a property in a ConceptDeclaration.
 */
abstract concept Property {
  o Identifier name
  o String type // Fully qualified type name or primitive type
  o String scalarType optional // For properties referring to scalars
  o Boolean isArray optional
  o Boolean isOptional optional
  o Boolean isRelationship optional
  o Boolean isIdentifier optional
  o Identifier inheritedFrom optional // For inherited properties
  o Boolean isCircular optional
  o Boolean isEnum optional
  o Vocabulary vocabulary optional
  o MetadataMap metadata optional
}

concept StringProperty extends Property {
  o String regex optional // For String properties
  o Integer[] length optional // For String properties
  o String default optional // Default value for StringProperty
}
concept IntegerProperty extends Property {
  o Integer[] range optional // For Integer properties
  o Integer default optional // Default value for IntegerProperty
}
concept BooleanProperty extends Property {
  o Boolean default optional // Default value for BooleanProperty
}
concept DoubleProperty extends Property {
  o Double[] range optional // For Double properties
  o Double default optional // Default value for DoubleProperty
}
concept LongProperty extends Property {
  o Long[] range optional // For Long properties
  o Long default optional // Default value for LongProperty
}
concept DateTimeProperty extends Property {
  o String default optional // Default value for DateTimeProperty
}

/**
 * Represents a vocabulary object.
 */
concept Vocabulary {
  o String label optional
  o PathTerms path optional
  o AdditionalTermMap additionalTerms optional
}

/**
 * A map from parent identifiers to localized terms (labels)
 */
map PathTerms {
  o String // key
  o String // optional, value can be null
}

/**
 * Represents an additional term in a vocabulary.
 */
map AdditionalTermMap {
  o String
  o String // optional, value can be null
}

/**
 * Represents a metadata map (i.e. non-vocabulary declarations).
 */
map MetadataMap {
  o String
  o Decorators
}

concept Decorators {
    o DecoratorValue[] values
}
abstract concept DecoratorValue {}
concept StringDecoratorValue extends DecoratorValue {
  o String value
}
concept NumberDecoratorValue extends DecoratorValue {
  o Double value
}
concept BooleanDecoratorValue extends DecoratorValue {
  o Boolean value
}
concept DecoratorTypeLiteral extends DecoratorValue {
  o String type
  o Boolean isArray optional
}
