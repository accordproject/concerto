{
    "en": {
        "like": [
            "{0, plural, offset:1",
            "     =0 {Be the first to like this}",
            "     =1 {You liked this}",
            "    one {You and someone else liked this}",
            "  other {You and # others liked this}",
            "}"
        ],
        "test-hello-array": "Hello, {0} {1} {2}",
        "test-hello-object": "Hello, {first} {middle} {last}",
        "test-repeat-array": "{0} {0} {0}",
        "test-repeat-object": "{value} {value} {value}",

        "basemodelmanager-namespaceexists": "Namespace \"{namespace}\"\"{prefix}\" is already declared\"{postfix}\".",
        "basemodelmanager-unversionednamespace": "Cannot add an unversioned namespace when \"strict\" is true",
        "basemodelmanager-metamodelversion": "Model file version \"{modelFileVersion}\" does not match metamodel version \"{metamodelVersion}\"",
        "basemodelmanager-modelfilenotfound": "Model file for namespace \"{namespace}\" not found",

        "classdeclaration-constructor-modelastreq": "\"ModelFile\" and \"AST\" are required to create a \"ClassDecl\".",
        "classdeclaration-process-unrecmodelelem": "Unrecognised model element \"{type}\".",
        "classdeclaration-getfield-notfindsupertype": "Could not find supertype \"{type}\".",
        "classdeclaration-validate-identifiernotproperty": "Class \"{class}\" is identified by field \"{idField}\", but does not contain this property.",
        "classdeclaration-validate-identifiernotstring": "Class \"{class}\" is identified by field \"{idField}\", but the type of the field is not \"String\".",
        "classdeclaration-validate-duplicatefieldname": "Class \"{class}\" has more than one field named \"{fieldName}\".",
        "classdeclaration-validate-missingidentifier": "Class \"{class}\" is not declared as \"abstract\". It must define an identifying field.",
        "classdeclaration-validate-selfextending": "Class \"{class}\" cannot extend itself.",
        "classdeclaration-validate-undefined-properties": "Properties of Class \"{class}\" has to be defined.",

        "concerto-gettypedeclaration-noclassattribute": "Input object does not have a $class attribute.",
        "concerto-getidentifier-noidfield": "Object does not have an identifier: \"{object}\".",
        "concerto-invaliduri": "Invalid URI \"{uri}\".",
        "concerto-invalidurischeme": "Invalid URI scheme \"{uri}\".",
        "concerto-invaliduriformat":"Invalid URI resource format \"{uri}\".",

        "factory-newinstance-invalididentifierregex": "Provided id does not match regex: \"{regex}\".",
        "factory-newinstance-typenotidentifiable": "Type \"{type}\" is not identifiable.",
        "factory-newrelationship-notidentifiable":"Cannot create a relationship to \"{fqn}\", it is not identifiable.",
        "factory-nsnotspecified": "Namespace not specified.",
        "factory-typenotspecified": "Type not specified.",

        "javascriptparser-malformedjsdoccommentmultiplereturns": "Malformed JSDoc comment. More than one returns: \"{comment}\"",
        "javascriptparser-malformedjsdoccommentmultipleexceptions": "Malformed JSDoc comment. More than one throws/exception: \"{comment}\"",
        "javascriptparser-malformedjsdoccomment": "Malformed JSDoc comment. \"{comment}\"",
        "javascriptparser-unrecognizedjsdoccomment": "Unrecognized JSDoc comment. \"{comment}\"",

        "modelfile-constructor-unrecmodelelem": "Unrecognised model element \"{type}\".",
        "modelfile-resolvetype-undecltype": "Undeclared type \"{type}\" in \"{context}\".",
        "modelfile-resolveimport-failfindimp": "Failed to find \"{type}\" in list of imports \"[{imports}]\" for namespace \"{namespace}\".",

        "transactiondeclaration-getidentifierfieldname-noidentifyingfield": "Transactions do not have an identifying field.",

        "composer-connect-noconopts": "\"connectOptions\" not specified.",
        "composer-connect-nokeyvalstore": "\"connectOptions.keyValStore\" not specified.",
        "composer-connect-nomembersrvcurl": "\"connectOptions.membershipServicesURL\" not specified.",
        "composer-connect-nopeerurl": "\"connectOptions.peerURL\" not specified.",
        "composer-connect-noeventhuburl": "\"connectOptions.eventHubURL\" not specified.",
        "composer-connect-notconnected": "Connection needs to be connected. Call \"connect(..)\".",
        "composer-login-noenrollmentid": "\"enrollmentID\" not specified.",
        "composer-login-noenrollmentsecret": "\"enrollmentSecret\" not specified.",
        "composer-deploy-nosecuritycontext": "\"securityContext\" not specified.",

        "factory-newinstance-missingidentifier": "Missing identifier for Type \"{type}\" in namespace \"{namespace}\".",
        "factory-newinstance-invalididentifier": "Invalid or missing identifier for Type \"{type}\" in namespace \"{namespace}\".",
        "factory-newinstance-abstracttype": "Cannot instantiate the abstract type \"{type}\" in the \"{namespace}\" namespace.",
        "factory-newrelationship-notregisteredwithmm": "Cannot create relationship as namespace \"{namespace}\" is not known.",
        "factory-newinstance-typenotdeclaredinns": "Cannot instantiate Type \"{type}\" in namespace \"{namespace}\".",

        "instancegenerator-newinstance-noconcreteclass": "No concrete extending type for \"{type}\".",

        "modelfile-constructor-astnotobject": "ModelFile expects a Concerto model AST as input.",
        "modelfile-constructor-defnotstring": "ModelFile expects an (optional) Concerto model definition as a string.",
        "modelfile-constructor-filenamenotstring": "ModelFile expects an (optional) filename as a string.",
        "modelfile-getlocaltype-notinit": "Internal error: local types are not yet initialized. Do not try to resolve types inside `process`.",
        "modelfile-incompatibleversion": "ModelFile expects Concerto version \"{concertoVersion}\" but this is \"{packageJsonVersion}\"",
        "modelfile-unversionedimport": "Cannot use an unversioned import \"{namespace}\" when 'strict' option on Model Manager is set.",
        "modelfile-invalidnamespacepart": "Invalid namespace part '\"{part}\"'",
        "modelfile-wildcardimport-notallowed": "Wilcard Imports are not permitted in strict mode.",
        "modelfile-aliastype-primitive": "Types cannot be aliased to primitive type",
        "modelfile-aliastype-disabled": "Aliasing disabled, set importAliasing to true",

        "modelmanager-resolvetype-nonsfortype": "No registered namespace for type \"{type}\" in \"{context}\".",
        "modelmanager-resolvetype-notypeinnsforcontext": "No type \"{type}\" in namespace \"{namespace}\" for \"{context}\".",

        "modelmanager-gettype-noregisteredns": "Namespace is not defined for type \"{type}\".",
        "modelmanager-gettype-duplicatensimport": "Importing types from different versions (\"{version1}\", \"{version2}\") of the same namespace \"{namespace}\" is not permitted.",
        "modelmanager-gettype-notypeinns": "Type \"{type}\" is not defined in namespace \"{namespace}\".",

        "serializer-constructor-factorynull": "\"Factory\" cannot be \"null\".",
        "serializer-constructor-modelmanagernull": "\"ModelManager\" cannot be \"null\".",
        "serializer-tojson-notcobject": "\"Serializer.toJSON\" only accepts \"Concept\", \"Event\", \"Asset\", \"Participant\" or \"Transaction\".",

        "util-securitycheck-novalidcontext": "A valid \"SecurityContext\" must be specified.",

        "modelutil-getnamespace-nofnq": "FQN is invalid.",

        "resourceid-constructor-missingnamespace": "Missing namespace",
        "resourceid-constructor-missingtype": "Missing type",
        "resourceid-constructor-missingid": "Missing id",

        "resourcevalidator-notresourceorconcept": "Model violation in the \"{resourceId}\" instance. Class \"{classFQN}\" has the value of \"{invalidValue}\". Expected a \"Resource\" or a \"Concept\".",
        "resourcevalidator-notrelationship": "Model violation in the \"{resourceId}\" instance. Class \"{classFQN}\" has a value of \"{invalidValue}\". Expected a \"Relationship\".",
        "resourcevalidator-fieldtypeviolation": "Model violation in the \"{resourceId}\" instance. The field \"{propertyName}\" has a value of \"{value}\" (type of value: \"{typeOfValue}\"). Expected type of value: \"{fieldType}\".",
        "resourcevalidator-missingrequiredproperty": "The instance \"{resourceId}\" is missing the required field \"{fieldName}\".",
        "resourcevalidator-invalidenumvalue": "Model violation in the \"{resourceId}\" instance. Invalid enum value of \"{value}\" for the field \"{fieldName}\".",
        "resourcevalidator-abstractclass": "The class \"{className}\" is abstract and should not contain an instance.",
        "resourcevalidator-undeclaredfield": "Instance \"{resourceId}\" has a property named \"{propertyName}\", which is not declared in \"{fullyQualifiedTypeName}\".",
        "resourcevalidator-invalidfieldassignment": "Instance \"{resourceId}\" has a property \"{propertyName}\" with type \"{objectType}\" that is not derived from \"{fieldType}\".",
        "resourcevalidator-emptyidentifier": "Instance \"{resourceId}\" has an empty identifier.",
        "resourcevalidator-invalidmap": "Model violation in the \"{resourceId}\" instance. Invalid Type for Map Key or Value - expected String type.",

        "typenotfounderror-defaultmessage": "Type \"{typeName}\" not found.",

        "validatedresource-fieldnotdefined": "The instance with id \"{id}\" trying to set field \"{propName}\" which is not declared in the model.",
        "validatedresource-addarrayvalue-notarray": "The instance with id \"{id}\" trying to add array item \"{propName}\" which is not declared as an array in the model.",

        "vocabulary-constructor-vocabularymanagerrequired": "\"VocabularyManager\" must be specified",
        "vocabulary-constructor-vocabularyobjectrequired": "\"Vocabulary object\" must be specified",
        "vocabulary-constructor-vocabularyobjectdeclarationsrequired": "\"Vocabulary object\" must have declarations.",
        "vocabulary-constructor-vocabularyobjectnamespacerequired": "A vocabulary must specify a namespace.",
        "vocabulary-constructor-vocabularyobjectlocalerequired": "A vocabulary must specify a locale.",
        "vocabulary-validatelocale-localelowercase": "Locale must be lowercase with dashes.",

        "vocabularymanager-addvocabulary-nocontents": "Vocabulary contents must be specified",
        "vocabularymanager-addvocabulary-alreadyadded": "Vocabulary \"{identifier}\" is already added",

        "whereastvalidator-propertytypeviolation": "Property \"{propertyName}\" cannot be compared with \"{value}\" (type of value: \"{typeOfValue}\"). Expected type: \"{fieldType}\".",
        "whereastvalidator-enum-propertytypeviolation": "Enum property \"{propertyName}\" cannot be compared with \"{value}\" (type of value: \"{typeOfValue}\"). Expected type: \"String\".",
        "whereastvalidator-relationship-propertytypeviolation": "Relationship \"{propertyName}\" cannot be compared with \"{value}\" (type of value: \"{typeOfValue}\"). Expected type: \"String\".",
        "whereastvalidator-unsupportedtype": "Property \"{propertyName}\" of type \"{fieldType}\" cannot be compared with a literal value.",
        "whereastvalidator-invalidoperator": "Property \"{propertyName}\" cannot be compared using the \"{operator}\" operator."
    }
}
