class Concerto {
   + void constructor(modelManager)
   + void validate(obj,options?) throws Error
   + void getModelManager()
   + boolean isObject(obj)
   + void getTypeDeclaration(obj)
   + string getIdentifier(obj)
   + boolean isIdentifiable(obj)
   + boolean isRelationship(obj)
   + void setIdentifier(obj,string)
   + string getFullyQualifiedIdentifier(obj)
   + string toURI(obj)
   + void fromURI(string) throws Error
   + string getType(obj)
   + string getNamespace(obj)
}
   + object setCurrentTime()
class DecoratorManager {
   + ModelManager validate(decoratorCommandSet,ModelFile[]) throws Error
   + object migrateTo(decoratorCommandSet,string)
   + boolean canMigrate(decoratorCommandSet,DCS_VERSION)
   + ModelManager decorateModels(ModelManager,decoratorCommandSet,object?,boolean?,boolean?,boolean?,boolean?,boolean?)
   + ExtractDecoratorsResult extractDecorators(ModelManager,object,boolean,string,boolean)
   + ExtractDecoratorsResult extractVocabularies(ModelManager,object,boolean,string,boolean)
   + ExtractDecoratorsResult extractNonVocabDecorators(ModelManager,object,boolean,string,boolean)
   + void validateCommand(ModelManager,command)
   + Boolean falsyOrEqual(string||,string[])
   + void applyDecorator(decorated,string,newDecorator)
   + void executeCommand(string,declaration,command,property?,object?,boolean?)
   + void executePropertyCommand(property,command)
   + Boolean isNamespaceTargetEnabled(boolean?)
}
   + string[] intersect()
   + boolean isUnversionedNamespaceEqual()
   + object getDecoratorModel()
class Factory {
   + string newId()
   + void constructor(ModelManager)
   + Resource newResource(String,String,String?,Object?,boolean?,String?,boolean?) throws TypeNotFoundException
   + Resource newConcept(String,String,String?,Object?,boolean?,String?,boolean?) throws TypeNotFoundException
   + Relationship newRelationship(String,String,String) throws TypeNotFoundException
   + Resource newTransaction(String,String,String?,Object?,String?,boolean?)
   + Resource newEvent(String,String,String?,Object?,String?,boolean?)
}
class AssetDeclaration extends IdentifiedDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class ClassDeclaration extends Decorated {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + ClassDeclaration _resolveSuperType()
   + boolean isAbstract()
   + string getName()
   + string getNamespace()
   + string getFullyQualifiedName()
   + Boolean isIdentified()
   + Boolean isSystemIdentified()
   + Boolean isExplicitlyIdentified()
   + string getIdentifierFieldName()
   + Property getOwnProperty(string)
   + Property[] getOwnProperties()
   + string getSuperType()
   + ClassDeclaration getSuperTypeDeclaration()
   + ClassDeclaration[] getAssignableClassDeclarations()
   + ClassDeclaration[] getAllSuperTypeDeclarations()
   + Property getProperty(string)
   + Property[] getProperties()
   + Property getNestedProperty(string) throws IllegalModelException
   + String toString()
   + boolean isAsset()
   + boolean isParticipant()
   + boolean isTransaction()
   + boolean isEvent()
   + boolean isConcept()
   + boolean isEnum()
   + boolean isClassDeclaration()
}
class ConceptDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class Decorator {
   + void constructor(ClassDeclaration|Property,Object) throws IllegalModelException
   + void getParent()
   + string getName()
   + object[] getArguments()
}
class DecoratorFactory {
   + Decorator newDecorator(ClassDeclaration|Property,Object)
}
class EnumDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
   + String toString()
}
class EnumValueDeclaration extends Property {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
   + boolean isEnumValue()
}
class EventDeclaration extends IdentifiedDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class IdentifiedDeclaration extends ClassDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class IllegalModelException extends BaseFileException {
   + void constructor(string,ModelFile?,Object?,number,number,number,number,string?)
}
class Introspector {
   + void constructor(ModelManager)
   + ClassDeclaration[] getClassDeclarations()
   + ClassDeclaration getClassDeclaration(String) throws Error
}
class ModelFileDownloader {
   + void constructor(ModelFileLoader,Number)
   + Promise downloadExternalDependencies(ModelFile[],Object?)
   + Promise runJob(Object,Object)
}
class MetaModel {
   + string getMetaModelCto()
   + void createMetaModelManager()
   + object validateMetaModel(object)
   + object createNameTable(modelManager,object)
   + string resolveName(string,object)
   + object resolveTypeNames(object,object)
   + object resolveMetaModel(object,object,boolean?)
   + object modelFileToMetaModel(object,boolean?)
   + object modelManagerToMetaModel(object,boolean?,boolean?)
   + object modelManagerFromMetaModel(object,boolean?)
}
class ModelFile {
   + void constructor(ModelManager,object,string,string?) throws IllegalModelException
   + boolean isModelFile()
   + Boolean isSystemModelFile()
   + boolean isExternal()
   + ModelManager getModelManager()
   + string[] getImports()
   + boolean isDefined(string)
   + ClassDeclaration getLocalType(string)
   + AssetDeclaration getAssetDeclaration(string)
   + TransactionDeclaration getTransactionDeclaration(string)
   + EventDeclaration getEventDeclaration(string)
   + ParticipantDeclaration getParticipantDeclaration(string)
   + string getNamespace()
   + string getName()
   + AssetDeclaration[] getAssetDeclarations()
   + TransactionDeclaration[] getTransactionDeclarations()
   + EventDeclaration[] getEventDeclarations()
   + ParticipantDeclaration[] getParticipantDeclarations()
   + ConceptDeclaration[] getConceptDeclarations()
   + EnumDeclaration[] getEnumDeclarations()
   + ClassDeclaration[] getDeclarations(Function)
   + ClassDeclaration[] getAllDeclarations()
   + string getDefinitions()
   + object getAst()
   + string getConcertoVersion()
   + void isCompatibleVersion()
}
class ParticipantDeclaration extends IdentifiedDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class Property extends Decorated {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
   + ClassDeclaration getParent()
   + string getName()
   + string getType()
   + boolean isOptional()
   + string getFullyQualifiedTypeName()
   + string getFullyQualifiedName()
   + string getNamespace()
   + boolean isArray()
   + boolean isTypeEnum()
   + boolean isPrimitive()
}
class RelationshipDeclaration extends Property {
   + void constructor(ClassDeclaration,Object) throws IllegalModelException
   + String toString()
   + boolean isRelationship()
}
class TransactionDeclaration extends IdentifiedDeclaration {
   + void constructor(ModelFile,Object) throws IllegalModelException
}
class Identifiable extends Typed {
   + string getTimestamp()
   + string getIdentifier()
   + void setIdentifier(string)
   + string getFullyQualifiedIdentifier()
   + String toString()
   + boolean isRelationship()
   + boolean isResource()
   + String toURI()
}
class Relationship extends Identifiable {
   + String toString()
   + boolean isRelationship()
   + Relationship fromURI(ModelManager,String,String?,String?)
}
class Resource extends Identifiable {
   + String toString()
   + boolean isResource()
   + boolean isConcept()
   + boolean isIdentifiable()
   + Object toJSON()
}
class Typed {
   + string getType()
   + string getFullyQualifiedType()
   + string getNamespace()
   + void setPropertyValue(string,string)
   + void addArrayValue(string,string)
   + boolean instanceOf(String)
}
class ValidatedResource extends Resource {
   + void setPropertyValue(string,string) throws Error
   + void addArrayValue(string,string) throws Error
   + void validate() throws Error
}
class ModelLoader {
   + object loadModelManager(string[],object,boolean?,number?)
   + object loadModelManagerFromModelFiles(object[],string[],object,boolean?,number?)
}
class ModelManager {
   + void constructor(object?)
   + boolean isModelManager()
   + Object accept(Object,Object)
   + void validateModelFile(string,string?) throws IllegalModelException
   + Object addModelFile(string|ModelFile,string,boolean?) throws IllegalModelException
   + Object updateModelFile(string|ModelFile,string?,boolean?) throws IllegalModelException
   + void deleteModelFile(string)
   + Object[] addModelFiles(|,string[],boolean?)
   + void validateModelFiles()
   + Promise updateExternalModels(Object?,ModelFileDownloader?) throws IllegalModelException
   + void writeModelsToFileSystem(string,Object?,boolean)
   + Object[] getModels(Object?,boolean)
   + void clearModelFiles()
   + ModelFile getModelFile(string)
   + string[] getNamespaces()
   + AssetDeclaration[] getAssetDeclarations()
   + TransactionDeclaration[] getTransactionDeclarations()
   + EventDeclaration[] getEventDeclarations()
   + ParticipantDeclaration[] getParticipantDeclarations()
   + EnumDeclaration[] getEnumDeclarations()
   + ConceptDeclaration[] getConceptDeclarations()
   + Factory getFactory()
   + Serializer getSerializer()
   + DecoratorFactory[] getDecoratorFactories()
   + void addDecoratorFactory(DecoratorFactory)
   + boolean derivesFrom(string,string)
}
class SecurityException extends BaseException {
   + void constructor(string)
}
class Serializer {
   + void constructor(Factory,ModelManager,object?)
   + void setDefaultOptions(Object)
   + Object toJSON(Resource,Object?,boolean?,boolean?,boolean?,boolean?,boolean?,number?) throws Error
   + Resource fromJSON(Object,Object,boolean,boolean,number?)
}
class TypedStack {
   + void constructor(Object)
   + void push(Object,Object)
   + Object pop(Object)
   + Object peek(Object)
   + void clear()
}
class TypeNotFoundException extends BaseException {
   + void constructor(string,string?,string)
   + string getTypeName()
}
